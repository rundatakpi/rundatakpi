<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cn.run.kpi.estimate.dao.StoreLogDao">
  
    
    <sql id="logCondition">
        <if test="null != dataSourceCode and '' != dataSourceCode">
            and dataSourceCode = #{dataSourceCode}
        </if>
        <if test="null != bProtocolCode and '' != bProtocolCode">
            and bProtocolCode = #{bProtocolCode}
        </if>
        <if test="null != sProtocolCode and '' != sProtocolCode">
            and sProtocolCode = #{sProtocolCode}
        </if>
        <if test="null != actionType and '' != actionType">
            and actionType = #{actionType}
        </if>
        <if test="null != fieldCode and '' != fieldCode">
            and fieldCode = #{fieldCode}
        </if>
        <if test="null != startTime and '' != startTime">
            and createDate <![CDATA[ >= ]]> #{startTime}
        </if>
        <if test="null != endTime and '' != endTime">
            and createDate <![CDATA[ < ]]> #{endTime}
        </if>
    </sql>
    
	<select id="getList" parameterType="com.cn.run.kpi.estimate.entity.StoreLogData" resultType="com.cn.run.kpi.estimate.entity.StoreLogData">
		select 
			t.dataSourceCode,
			t.dataSourceDesc,
			t.bProtocolCode,
			t.bProtocolDesc,
			sum(t.inputNum) inputNum,
			round(avg(t.inputNum/t.totalNum),2) storageRate,
			floor(avg(t.fieldNum)) fieldNum,
			round(avg(t.accurateNum/t.totalNum),2) bAccuracy
		from t_input_log t
		<where>
			<include refid="logCondition"></include>
		</where>
		group by 
			t.dataSourceCode,
			t.bProtocolCode
		limit #{start},#{length}
	</select>
	
	<select id="getTotal" parameterType="com.cn.run.kpi.estimate.entity.StoreLogData" resultType="java.lang.Integer">
		SELECT count(
				DISTINCT t.dataSourceCode,
				t.bProtocolCode	
			)
		FROM t_input_log t 
		<where>
			<include refid="logCondition"></include>
		</where>
	</select>
	
	<select id="selectDetail" parameterType="com.cn.run.kpi.estimate.entity.StoreLogData" resultType="com.cn.run.kpi.estimate.entity.StoreLogData">
		select 
			createDate as logKey,
			round(${colName},2) as logValue from t_input_log t
		<where>
			<include refid="logCondition"></include>
		</where>
	</select>
	
	<select id="getProtocolInfo" parameterType="com.cn.run.kpi.estimate.entity.StoreLogData" resultType="com.cn.run.kpi.estimate.entity.StoreLogData">
		<!-- select 
			id,
			dataSourceCode,
			dataSourceDesc,
			bProtocolCode,
			bProtocolDesc,
			sProtocolCode,
			sProtocolDesc,
			actionType,
			sum(dataNum),
			fieldCode,
			fieldDesc,
			round(avg(fillNum)/avg(dataNum),2) storageRate,
			round(avg(accurateNum)/avg(dataNum),2) sAccuracy,
			round(avg(codeMatchNum)/avg(dataNum),2) codeMatch
		from t_input_log_detail 
		where dataSourceCode = #{dataSourceCode}
		and bProtocolCode = #{bProtocolCode}
		group by 
			dataSourceCode,
			bProtocolCode,
			sProtocolCode,
			actionType,
			fieldCode -->
		select 
			id,
			dataSourceCode,
			dataSourceDesc,
			bProtocolCode,
			bProtocolDesc,
			sProtocolCode,
			sProtocolDesc,
			actionType,
			sum(dataNum) dataNum,
			fieldCode
		from t_input_log_detail 
		where dataSourceCode = #{dataSourceCode}
		and bProtocolCode = #{bProtocolCode}
		group by 
			dataSourceCode,
			bProtocolCode,
			sProtocolCode,
			actionType
	</select>
	
	<select id="getFieldInfo" parameterType="com.cn.run.kpi.estimate.entity.StoreLogData" resultType="com.cn.run.kpi.estimate.entity.StoreFieldData">
		select 
			fieldCode,
			fieldDesc,
			round(avg(fillNum)/avg(dataNum),2) fillRate,
			round(avg(accurateNum)/avg(dataNum),2) sAccuracy,
			round(avg(codeMatchNum)/avg(dataNum),2) codeMatch
		from t_input_log_detail 
		where 
			dataSourceCode = #{dataSourceCode}
			and bProtocolCode = #{bProtocolCode}
			and sProtocolCode = #{sProtocolCode}
			and actionType = #{actionType}
		group by 
			dataSourceCode,
			bProtocolCode,
			sProtocolCode,
			actionType,
			fieldCode
	</select>
	
	<select id="getFeildDetail" parameterType="com.cn.run.kpi.estimate.entity.StoreLogData" resultType="com.cn.run.kpi.estimate.entity.StoreLogData">
		select 
			createDate as logKey,
			<choose>
		        <when  test=" 'dataNum' == colName">
		            ${colName}
		        </when>
		        <otherwise>
		           round(${colName},2) 
		        </otherwise>
		    </choose>
			as logValue 
		from t_input_log_detail
		<where>
			<include refid="logCondition"></include>
		</where> 
		group by createDate
	</select>
	
</mapper>